\input texinfo @c -*- coding: utf-8; mode: texinfo; -*-
@ignore
    Translation of GIT committish: FILL-IN-HEAD-COMMITTISH

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes..
@end ignore

@setfilename lilypond-contributor.info
@settitle LilyPond Contributor's Guide
@documentencoding UTF-8
@documentlanguage en
@afourpaper

@macro manualIntro
This manual documents contributing to LilyPond version.  It discusses technical issues and policies that
contributors should follow.

This manual is not intended to be read sequentially; new contributors
should only read the sections which are relevant to them.  For more
information about different jobs, see @rweb{Help us}.
@end macro

@c `Contributorâ€™s Guide' was born 2007-09-15 with this commit:
@c Add developers resources page
@c author: John Mandereau
@c commit: 135a5beef5c4cf893d02947cdfcb5bb90c854486
@c   file: Documentation/devel.html.in

@macro copyrightDeclare
Copyright @copyright{} 2007--2015 by the authors.
@end macro

@set FDL
@include macros.itexi


@c don't remove this comment.
@ignore
@omfcreator LilyPond Development Team
@omfdescription Contributor's Guide of the LilyPond music engraving system
@omftype program usage
@omfcategory Applications|Publishing
@omflanguage English
@end ignore

@c @lilyTitlePage{Contributor's Guide} [COMMENTED]
@c replaced with a top node below

@c TOC -- non-tex
@ifnottex
@node Top
@top Contributor's Guide

@menu
* Introduction to contributing::

Appendices

* LilyPond grammar::
@end menu

@c @docMain [COMMENTED]
@end ifnottex

@contents

@allowcodebreaks false

@node Introduction to contributing
@chapter Introduction to contributing

This chapter presents a quick overview of ways that people can
help LilyPond.

@menu
* Summary for experienced developers::
@end menu

@node Summary for experienced developers
@section Summary for experienced developers

If you are already familiar with typical open-source tools, here's
what you need to know:

@itemize
@item @strong{source repository}:
hosted by GNU savannah.

@example
@uref{http://git.savannah.gnu.org/gitweb/?p=lilypond.git}
@end example

@item @strong{environment variables}:
many maintenance scripts, and many instructions in this guide rely on
predefined Environment variables.

@item @strong{mailing lists}:
given on @c @rweb{Contact}. [COMMENTED]

@item @strong{branches}:

@itemize
@item @code{master}:
base your work from this, but do @strong{not push} to it.

@item @code{staging}:
after a successful review (see below), push here.

@item @code{translation}:
translators should base their work from this, and also push to it.

@item @code{dev/foo}:
feel free to push any new branch name under @code{dev/}.

@end itemize

@item @strong{regression tests}:
also known as regtests; this is a collection of more than a
thousand .ly files.  We track the output of those files between
versions.

If a patch introduces any unintentional changes to the regtests,
we will likely reject it -- make sure that you are aware and can
explain any regtest changes.  More info in Regression tests.

@item @strong{reviews}:
after finishing work on a patch or branch:

@enumerate
@item
upload it with our custom @code{git-cl}.  In addition to uploading
it to the google rietveld code review tool, this adds a tracker
issue so that we don't lose your patch.  The status of your
patch is kept on the issue tracker; see Issues.

@example
@uref{https://github.com/gperciva/git-cl}
@end example

Your patch will be given @code{Patch-new} status.  More info in
Uploading a patch for review.

@item
If your patch passes some automatic tests, it will be given
@code{Patch-review} status.  This generally happens within 24
hours.

@item
After that, the patch must wait for the next patch countdown,
which occur 3 times a week.  If there are a lot of patches waiting
for a countdown, a subset of patches are chosen randomly.  When
your patch is put on a countdown, it will be given
@code{Patch-countdown} status.

@item
The countdown is a 48-hour period which gives other developers one
last chance to review the patch.  If no significant problems are
found, your patch will be given @code{Patch-push} status.

@item
You may now either push it to the @code{staging} branch, or email
your patch (created with @w{@code{git format-patch}}) to somebody
who will push it for you.

@end enumerate

@advanced{
Yes, this process means that most patches wait between
60-120 hours before reaching @code{master}.  This is unfortunate, but
given our limited resources for reviewing patches and a history of
unintended breakage in @code{master}, this is the best compromise
we have found.
}

@c I don't think this is important enough to list here, but I may
@c change my mind and/or leave a link to a later CG section.
@ignore
@item @strong{code style}:
C++ code should be formatted with
@file{scripts/auxiliar/fixcc.py}, which requires
@url{http://astyle.sourceforge.net/, astyle 2.02}.  However, we
are not very strict about this requirement.

At the moment, scheme code should be formatted qq{like emacs does
it}.  We are working on an automated tool to simplify this step.
However, we are not very strict about this requirement either.
@end ignore

@end itemize

@node LilyPond grammar
@appendix LilyPond grammar

This appendix contains a description of the LilyPond grammar, as
output from the parser.

@bye
